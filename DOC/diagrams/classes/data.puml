@startuml
skinparam groupInheritance 2

package board {
    abstract class Board {
        placedTiles: Piece[][]
        premiumTiles: PremiumTileType[][]

        getSize(): int
        placePiece(piece: Piece, x: int, y: int)
        isCenter(x: int, y: int): bool
        isCellEmpty(x: int, y: int): bool
        getCellPiece(x: int, y: int): Piece
        isPremiumTile(x: int, y: int): bool
        getPremiumTileType(x: int, y: int): PremiumTileType
        isCellValid(x: int, y: int): bool
    }

    class JuniorBoard {
    }

    class StandardBoard {
    }

    class SuperBoard {
    }

    Board <|-- JuniorBoard
    Board <|-- StandardBoard
    Board <|-- SuperBoard

    enum BoardType {
        Junior
        Standard
        Super
    }

    enum PremiumTileType {
        QuadrupleWord
        TripleWord
        DoubleWord
        QuadrupleLetter
        TripleLetter
        DoubleLetter
    }
}

package pieces {
    class Bag {
        isEmpty(): bool
        getSize(): int
        addPiece(piece: Piece)
    }

    class Piece {
        letter: String
        value: int
        isBlank: bool
    }

    Bag "0..1" -- "0..100" Piece : contains
    Board "0..1" -- "0..100" Piece : placedTiles
}

package leaderboard {
    class Leaderboard {
        Leaderboard()
        Leaderboard(score: Score)
        Leaderboard(scoreArray: Score[])
        getScoreArray(): Score[]
        addScore(score: Score)
    }

    class Score {
        value: int
        isWinner: bool
        playerName: String
    }

    Leaderboard "1" -- "*" Score
}

package dawg {
    class DAWG {
        getRoot(): Node
        getNode(hash: int): Node
        addNode(node: Node)
        removeNode(hash: int)
    }

    class Node {
        isEndOfWord: bool
        character: char
        hashCode: int
        depth: int

        getSuccessor(character: char): Node
        addSuccessor(character: char, successor: Node)
        getDepth(): int
        getParent(): Node
        isEndOfWord(): bool
        setEndOfWord(endOfWord: bool)
        calculateHashCode()
    }

    DAWG "0..1" -- "1" Node : root
    DAWG "0..1" -- "*" Node : uniqueNodes

    Node "*" -- "*" Node : successors
    Node "*" --> "0..1" Node : parent
}

package properties {
    class GameProperties {
        language: Language
        boardType: BoardType
        players: int
        cpus: int
    }

    enum Language {
        English
        Catalan
        Spanish
    }
}

class Movement {
    word: String
    x: int
    y: int
    direction: Direction
}

class Player {
    name: String
    score: int
    cpu: bool

    addScore(amount: int)
    addPiece(piece: Piece)
    removePiece(piece: Piece)
}

Player "0..1" -- "0..7" Piece : hand

@enduml