plugins {
    id 'java'
    id 'application'
}

group = 'edu.upc.prop.scrabble'
version = '1.0-SNAPSHOT'
layout.buildDirectory.set(file("EXE"))

ext {
    terminalMainClass = 'edu.upc.prop.scrabble.presenter.terminal.Main'
    swingMainClass = 'edu.upc.prop.scrabble.presenter.swing.Main'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}


repositories {
    mavenCentral()
}

dependencies {
    // this is just an example of importing an external library, you do not need to use it in your project
    implementation 'com.google.code.gson:gson:2.8.9'
    testImplementation('junit:junit:4.13.1')
}

sourceSets {
    main {
        java.srcDir 'FONTS/main'
    }

    test {
        java.srcDir 'FONTS/test'
    }

    testrunner {
        java.srcDir 'FONTS/testrunner'
        compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

tasks.register('copyTextFiles', Copy) {
    from 'FONTS/main'
    into layout.buildDirectory.dir("classes/java/main")
    include '**/*.txt'
}

tasks.register('generateRunFiles') {
    doLast {
        def outputDir = layout.buildDirectory.dir("classes/java/main").get().asFile

        def batchFile = new File(outputDir, "scrabble.bat")
        batchFile.text = '@echo off\n' +
                'java edu.upc.prop.scrabble.Main'

        def shellFile = new File(outputDir, "scrabble.sh")
        shellFile.text = '#!/bin/bash\n' +
                'java edu.upc.prop.scrabble.Main'
    }
}

tasks.named('build') {
    dependsOn copyTextFiles
    dependsOn generateRunFiles
}

tasks.register('runTerminal', JavaExec) {
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set(terminalMainClass)
    standardInput = System.in
    dependsOn copyTextFiles
    dependsOn generateRunFiles
}

tasks.register('runSwing', JavaExec) {
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set(swingMainClass)
    standardInput = System.in
    dependsOn copyTextFiles
    dependsOn generateRunFiles
}

