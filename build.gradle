plugins {
    id 'java'
    id 'application'
}

group = 'edu.upc.prop.scrabble'
version = '1.0-SNAPSHOT'
layout.buildDirectory.set(file("EXE"))

ext {
    swingMainClass = 'edu.upc.prop.scrabble.presenter.swing.Main'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.9'
    testImplementation 'junit:junit:4.13.1'
}

sourceSets {
    main {
        java.srcDir 'FONTS/main'
    }
    test {
        java.srcDir 'FONTS/test'
        resources.srcDir 'FONTS/test/resources'
    }
}

tasks.register('copyDependencies', Copy) {
    from configurations.runtimeClasspath
    into layout.buildDirectory.dir('libs')
}

tasks.register('copyTextFiles', Copy) {
    from 'FONTS/main'
    into layout.buildDirectory.dir("classes/java/main")
    include '**/*.txt'
}

tasks.register('generateRunFiles') {
    dependsOn 'copyDependencies'
    doLast {
        def outputDir = layout.buildDirectory.dir("classes/java/main").get().asFile
        def libsDir = new File(layout.buildDirectory.get().asFile, "libs")

        def relativeLibsPath = outputDir.toPath().relativize(libsDir.toPath()).toString().replace('\\', '/')

        def classpathEntries = ['.']
        libsDir.listFiles()?.each { file ->
            if (file.name.endsWith('.jar')) {
                classpathEntries << ("${relativeLibsPath}/${file.name}" as String)
            }
        }

        def classpath = classpathEntries.join(File.pathSeparator)

        def batchFile = new File(outputDir, "scrabble.bat")
        batchFile.text = '@echo off\n' +
                "java -cp \"$classpath\" ${swingMainClass}\n"

        def shellFile = new File(outputDir, "scrabble.sh")
        shellFile.text = '#!/bin/bash\n' +
                "java -cp \"$classpath\" ${swingMainClass}\n"
    }
}

tasks.named('build') {
    dependsOn 'copyTextFiles'
    dependsOn 'copyDependencies'
    dependsOn 'generateRunFiles'
}

tasks.register('runSwing', JavaExec) {
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set(swingMainClass)
    standardInput = System.in
    dependsOn copyTextFiles
    dependsOn copyDependencies
    dependsOn generateRunFiles
}
